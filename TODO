
  * also abstract over recursive occurrences

    > type family Rep (t :: k) :: (k -> [*] -> *) -> [*] -> *

    > class Generic (t :: k) where
    >   toRep :: NLong (CountArgs k) ps =>
    >            W t ps -> Rep t W ps

    > class RMap (rep :: (k -> [*] -> *) -> [*] -> *) where
    >   rmap :: NLong (CountArgs k) ps =>
    >           (forall (t :: k) ps. r t ps -> r' t ps) ->
    >           rep r ps -> rep r' ps

 * generate indexed data types

   * does Idxd need to inline its own copy of QE?

   * cf "Enumerating Well-Typed Terms Generically" by Yakushev and Jeuring

 * generic definition of ParInfos and EqFree

   * I suspect Idxd needs to simultaneously constraint all indices
